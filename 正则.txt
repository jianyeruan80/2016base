0.等价  /abc/gim或var reg=new RegExp("abc","gim") //全部，不分大小写，多行模式
1,关键字[什么是关键字，就是不代表自己。他有自己特定意思。如果要变回自己就：\（  \)]
( ) [ ] { } . * ^ $ + ? \
预定义组合
\d == [0-9]   \w == [a-zA-Z_0-9]  \s == [ \t\n\x0B\f\r]
2,实例 贪婪模式 - 非贪婪模式
var reg=/([a-z]+)/; // reg=/([a-z]+?)/;
var str = "abcdefg";
reg.test(str);  //按reg规则提取str     ()有提取意思
console.log(RegExp.$1);
3,实列 var reg = /[123]/ == /[1-3]/ 只要有1or2or3都ok 注：-只在[]内才表示连字符
reg.test('14') // -> true
4,var reg = /[^0-9]/ 不是0到9 排除型字符组
reg.test('1') // -> false
5.提取 exec 
var result = /(\d+)-(\w+)/.exec('12-ab');
console.log(result) // --> ["12-ab", "12", "ab"]  console.log(result.input);
var reg=/\d/g;
console.log(reg.exec('a1234'));//1
console.log(reg.exec('a1234')) //2
6,match全部一次出来
var a = 'aaaa'.match(/\w/g);
console.log(a); // ["a", "a", "a", "a"]
7,replace
 'aaaa'.replace(/\w/g, 'b')    //"bbbb"
'aaaa'.replace(/\w/g, function(value) {
    return value.toUpperCase();
}); // "AAAA"
'aa11AA'.replace(/([a-z]+)(\d+)([A-Z]+)/g, '$1'); // "aa"
'aa11AA'.replace(/([a-z]+)(\d+)([A-Z]+)/g, '$2'); // "11"
'aa11AA'.replace(/([a-z]+)(\d+)([A-Z]+)/g, '$3'); // "AA"
'aa11AA'.replace(/(\d+)/g, '$`'); //"aaaaAA"
'aa11AA'.replace(/(\d+)/g, "$'"); //"aaAAAA"
'aa11AA'.replace(/(\d+)/g, '|'); //"aa|AA"
===========应用用上的======
一、校验数字的表达式

1 数字：^[0-9]*$

2 n位的数字：^\d{n}$

3 至少n位的数字：^\d{n,}$

4 m-n位的数字：^\d{m,n}$

5 零和非零开头的数字：^(0|[1-9][0-9]*)$

6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$

7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$

8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$

9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$

10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$

11 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$

12 非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$

13 非负整数：^\d+$ 或 ^[1-9]\d*|0$

14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$

16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$

17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$

18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$

19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$

二、校验字符的表达式

1 汉字：^[\u4e00-\u9fa5]{0,}$

2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$

3 长度为3-20的所有字符：^.{3,20}$

4 由26个英文字母组成的字符串：^[A-Za-z]+$

5 由26个大写英文字母组成的字符串：^[A-Z]+$

6 由26个小写英文字母组成的字符串：^[a-z]+$

7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$

8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$

9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$

10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$

11 可以输入含有^%&',;=?$\"等字符：[^%&',;=?$\x22]+

12 禁止输入含有~的字符：[^~\x22]+

三、特殊需求表达式

1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$

2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?

3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$

4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$

5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$

6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}

7 身份证号(15位、18位数字)：^\d{15}|\d{18}$

8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$

9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$

10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$

11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$

12 日期格式：^\d{4}-\d{1,2}-\d{1,2}

13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

15 钱的输入格式：

16 1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$

17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$

18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$

19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$

20 5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]{2})?$

21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$

22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$

23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$

24 备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里

25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$

26 中文字符的正则表达式：[\u4e00-\u9fa5]

27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))

28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)

29 HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)

30 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)

31 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)

32 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)

33 IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)

34 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
http://www.lai18.com/content/2447444.html
/校验用户名：只能输入1-30个字母  
function isTrueName(s)    
{    
var patrn=/^[a-zA-Z]{1,30}$/;    
if (!patrn.exec(s)) return false    
return true    
}   
//校验密码：只能输入6-20个字母、数字、下划线    
function isPasswd(s)    
{    
var patrn=/^(/w){6,20}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”    
function isTel(s)    
{    
//var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?(/d){1,12})+$/;    
var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?((/d)|[ ]){1,12})+$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验手机号码：必须以数字开头，除数字外，可含有“-”    
function isMobil(s)    
{    
var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?((/d)|[ ]){1,12})+$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验邮政编码    
function isPostalCode(s)    
{    
//var patrn=/^[a-zA-Z0-9]{3,12}$/;    
var patrn=/^[a-zA-Z0-9 ]{3,12}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验搜索关键字    
function isSearch(s)    
{    
var patrn=/^[^`~!@#$%^&*()+=|///][/]/{/}:;'/,.<>/?]{1}[^`~!@$%^&()+=|///]    
        [/]/{/}:;'/,.<>?]{0,19}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
    
function isIP(s) //by zergling    
{    
var patrn=/^[0-9.]{1,20}$/;    
if (!patrn.exec(s)) return false    
return true    
}     
    
其他正则表达式：    
"^//d+$"　　//非负整数（正整数 + 0）    
"^[0-9]*[1-9][0-9]*$"　　//正整数     
"^((-//d+)|(0+))$"　　//非正整数（负整数 + 0）     
"^-[0-9]*[1-9][0-9]*$"　　//负整数     
"^-?//d+$"　　　　// 整数     
"^(-?//d+)(//.//d+)?$"　　//浮点数     
"^[A-Za-z]+$"　　// 由26个英文字母组成的字符串     
"^[A-Z]+$"　　//由 26个英文字母的大写组成的字符串     
"^[a-z]+$"　　//由 26个英文字母的小写组成的字符串     
"^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串     
"^//w+$"　　//由数字、26个英文字母或者下划线组成的字符串  
"/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(/.[a-zA-Z0-9_-])+/"   //email地址  
"^[//w-]+(//.[//w-]+)*@[//w-]+(//.[//w-]+)+$"　　　　//email地址     
"^[a-zA-z]+://(//w+(-//w+)*)(//.(//w+(-//w+)*))*(//?//S*)?$"　　//url  
"/^/[ /t]*$/"; 匹配1个空白行。     
"//d{2}-/d{5}/"; 验证1个ID号码是否由1个2位数字，1个连字符以及1个5位数字组成。     
"/<(.*)>.*<///1>/" 匹配1个HTML 标记  
 

 

 

第一种方法：  
  
var reg = /pattern/;第二种方法：  
  
var reg = new  RegExp('pattern');正则表达式的exec方法简介  
语法：  
  
reg.exec(str);其中str为要执行正则表达式的目标字符串。  
  
例如：  
  
<mce:script  type="text/javascript"><!--  
var reg = /test/;  
var str = 'testString';  
var result =  reg.exec(str);  
alert(result);  
// --></mce:script>将会输出test，因为正则表达式reg会匹配str(‘testString’)中的’test’子字符串，并且将其返回。  
  
  
我们使用下面的函数来做匹配正则的练习：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(result);  
}函数接受一个正则表达式参数reg和一个目标字符串参数str，执行之后会alert出正则表达式与字符串的匹配结果。  
  
用这个函数测试上面的例子就是：  
  
<mce:script  type="text/javascript"><!--  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(result);  
}  
var reg = /test/;  
var str = 'testString';  
execReg(reg,str);  
// --></mce:script>上面的例子用正则里的test去匹配字符串里的test，实在是很无聊，同样的任务用indexOf方法就可以完成了。用正则，自然是要完成更强大的功能：  
  
一片两片三四片，落尽正则全不见  
上面的小标题翻译成正则就是{1},{2},{3,4},{1,}。  
  
c{n}  
{1}表示一个的意思。  
  
/c{1}/只能匹配一个c。  
  
/c{2}/则会匹配两个连续的c。  
  
以此类推,  
  
/c{n}/则会匹配n个连续的c。  
  
看下面的例子：  
  
reg = /c{1}/;  
str='cainiao';  
execReg(reg,str);返回结果c  
  
  
reg = /c{2}/;  
str='cainiao';  
execReg(reg,str);返回结果null，表示没有匹配成功。  
  
  
reg = /c{2}/;  
str='ccVC果冻爽';  
execReg(reg,str);返回结果cc。  
  
c{m,n}  
c{3,4}的意思是，连续的3个c或者4个c。  
  
例如  
  
reg = /c{3,4}/;  
str='ccVC果冻爽';  
execReg(reg,str);返回结果null，表示没有匹配成功。  
  
  
reg = /c{3,4}/;  
str='cccTest';  
execReg(reg,str);结果返回ccc。  
  
  
reg = /c{3,4}/;  
str='ccccTest';  
execReg(reg,str);结果返回cccc，这表明正则会尽量多品牌，可3可4的时候它会选择多匹配一个。  
  
  
reg = /c{3,4}/;  
str='cccccTest';  
execReg(reg,str);仍然只匹配4个c。  
  
  
由以上例子可以推断出，c{m,n}表示m个到n个c，且m小于等于n。  
  
c{n,}  
c{1,}表示1个以上的c。例如：  
  
  
reg = /c{1,}/;  
str='cainiao';  
execReg(reg,str);结果返回c。  
  
  
reg = /c{1,}/;  
str='cccccTest';  
execReg(reg,str);返回ccccc，再次说明了正则表达式会尽量多地匹配。  
  
  
reg = /c{2,}/;  
str='cainiao';  
execReg(reg,str);结果返回null，c{2,}表示2个以上的c，而cainiao中只有1个c。  
  
  
由以上例子可知，c{n,}表示最少n个c，最多则不限个数。  
  
  
*,+,?  
*表示0次或者多次，等同于{0,}，即  
  
c* 和 c{0,} 是一个意思。  
  
  
+表示一次或者多次，等同于{1,}，即  
  
c+ 和 c{1,} 是一个意思。  
  
  
最后，?表示0次或者1次，等同于{0,1}，即  
  
c? 和 c{0,1} 是一个意思。  
  
  
贪心与非贪心  
人都是贪婪的，正则也是如此。我们在例子reg = /c{3,4}/;str='ccccTest';的例子中已经看到了，能匹配四个的时候，正则绝对不会去匹配三个。上面所介绍的所有的正则都是这样，只要在合法的情况下，它们会尽量多去匹配字符，这就叫做贪心模式。  
  
如果我们希望正则尽量少地匹配字符，那么就可以在表示数字的符号后面加上一个?。组成如下的形式：  
  
{n,}?, *?, +?, ??, {m,n}?  
  
同样来看一个例子：  
  
reg = /c{1,}?/;  
str='ccccc';  
execReg(reg,str);返回的结果只有1个c，尽管有5个c可以匹配，但是由于正则表达式是非贪心模式，所以只会匹配一个。  
  
/^开头,结尾$/  
^表示只匹配字符串的开头。看下面的例子：  
  
  
reg = /^c/;  
str='维生素c';  
execReg(reg,str);结果为null，因为字符串‘维生素c’的开头并不是c，所以匹配失败。  
  
  
reg = /^c/;  
str='cainiao';  
execReg(reg,str);这次则返回c，匹配成功，因为cainiao恰恰是以c开头的。  
  
  
与^相反，$则只匹配字符串结尾的字符，同样，看例子：  
  
  
reg = /c$/;  
str='cainiao';  
execReg(reg,str);返回null，表示正则表达式没能在字符串的结尾找到c这个字符。  
  
  
reg = /c$/;  
str='维生素c';  
execReg(reg,str);这次返回的结果是c，表明匹配成功。  
  
  
点’.’  
‘.’会匹配字符串中除了换行符/n之外的所有字符，例如  
  
reg = /./;  
str='cainiao';  
execReg(reg,str);结果显示，正则匹配到了字符c。  
  
  
reg = /./;  
str='blueidea';  
execReg(reg,str);这次是b。  
  
  
reg = /.+/;  
str='blueidea――经典论坛  好_。';  
execReg(reg,str);结果是“blueidea――经典论坛 好_。“也就是说所有的字符都被匹配掉了，包括一个空格，一个下滑线，和一个破折号。  
  
  
reg = /.+/;  
reg = /.+/;  
str='bbs.blueidea.com';  
execReg(reg,str);同样，直接返回整个字符串――bbs.blueidea.com，可见”.”也匹配”.”本身。  
  
  
reg = /^./;  
str='/ncainiao';  
execReg(reg,str);结果是null，终于失败了，正则要求字符串的第一个字符不是换行，但是恰恰字符是以/n开始的。  
  
  
二选一，正则表达式中的或，“|“  
b|c表示，匹配b或者c。  
  
例如：  
  
reg = /b|c/;  
str='blueidea';  
execReg(reg,str);结果是b。  
  
  
reg = /b|c/;  
str='cainiao';  
execReg(reg,str);结果是c。  
  
  
reg = /^b|c.+/;  
str='cainiao';  
execReg(reg,str);匹配掉整个cainiao。  
  
  
reg = /^b|c.+/;  
str='bbs.blueidea.com';  
execReg(reg,str);结果只有一个b，而不是整个字符串。因为上面正则表达式的意思是，匹配开头的b或者是c.+。  
  
括号  
reg = /^(b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);这次的结果是整个串bbs.blueidea.com，机上上面的括号这后，这个正则的意思是，如果字符串的开头是b或者c，那么匹配开头的b或者c以及其后的所有的非换行字符。  
  
如果你也实验了的话，会发现返回的结果后面多出来一个“,b“，这是()内的b|c所匹配的内容。我们在正则表达式内括号里写的内容会被认为是子正则表达式，所匹配的结果也会被记录下来供后面使用。我们暂且不去理会这个特性。  
  
  
字符集合[abc]  
[abc]表示a或者b或者c中的任意一个字符。例如：  
  
reg = /^[abc]/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回结果是b。  
  
  
reg = /^[abc]/;  
str='test';  
execReg(reg,str);这次的结果就是null了。  
  
  
我们在字字符集合中使用如下的表示方式:[a-z],[A-Z],[0-9]，分别表示小写字母，大写字母，数字。例如：  
  
  
reg =  /^[a-zA-Z][a-zA-Z0-9_]+/;  
str='test';  
execReg(reg,str);结果是整个test，正则的意思是开头必须是英文字母，后面可以是英文字母或者数字以及下划线。  
  
  
反字符集合[^abc]  
^在正则表达式开始部分的时候表示开头的意思，例如/^c/表示开头是c；但是在字符集和中，它表示的是类似“非“的意思，例如[^abc]就表示不能是a，b或者c中的任何一个。例如：  
  
reg = /[^abc]/;  
str='blueidea';  
execReg(reg,str);返回的结果是l，因为它是第一个非abc的字符（即第一个b没有匹配）。同样：  
  
reg = /[^abc]/;  
str='cainiao';  
execReg(reg,str);则返回i，前两个字符都是[abc]集合中的。  
  
由此我们可知：[^0-9]表示非数字，[^a-z]表示非小写字母，一次类推。  
  
  
边界与非边界  
/b表示的边界的意思，也就是说，只有字符串的开头和结尾才算数。例如//bc/就表示字符串开始的c或者是结尾的c。看下面的例子：  
  
  
reg = //bc/;  
str='cainiao';  
execReg(reg,str);返回结果c。匹配到了左边界的c字符。  
  
  
reg = //bc/;  
str='维生素c';  
execReg(reg,str);仍然返回c，不过这次返回的是右侧边界的c。  
  
  
reg = //bc/;  
str='bcb';  
execReg(reg,str);这次匹配失败，因为bcb字符串中的c被夹在中间，既不在左边界也不再右边界。  
  
  
与/b对应/B表示非边界。例如：  
  
  
reg = //Bc/;  
str='bcb';  
execReg(reg,str);这次会成功地匹配到bcb中的c，。然而  
  
  
reg = //Bc/;  
str='cainiao';  
execReg(reg,str);则会返回null。因为/B告诉正则，只匹配非边界的c。  
  
  
数字与非数字  
/d表示数字的意思，相反，/D表示非数字。例如：  
  
reg = //d/;  
str='cainiao8';  
execReg(reg,str);返回的匹配结果为8，因为它是第一个数字字符。  
  
  
reg = //D/;  
str='cainiao8';  
execReg(reg,str);返回c，第一个非数字字符。  
  
  
空白  
/f匹配换页符，/n匹配换行符，/r匹配回车，/t匹配制表符，/v匹配垂直制表符。  
  
/s匹配单个空格，等同于[/f/n/r/t/v]。例如：  
  
  
reg = //s.+/;  
str='This is a test  String.';  
execReg(reg,str);返回“is a test String.”，正则的意思是匹配第一个空格以及其后的所有非换行字符。  
  
  
同样，/S表示非空格字符。  
  
reg = //S+/;  
str='This is a test  String.';  
execReg(reg,str);匹配结果为This，当遇到第一个空格之后，正则就停止匹配了。  
  
  
单词字符  
/w表示单词字符，等同于字符集合[a-zA-Z0-9_]。例如：  
  
reg = //w+/;  
str='blueidea';  
execReg(reg,str);返回完整的blueidea字符串，因为所有字符都是单词字符。  
  
  
reg = //w+/;  
str='.className';  
execReg(reg,str);结果显示匹配了字符串中的className，只有第一个“.”――唯一的非单词字符没有匹配。  
  
  
reg = //w+/;  
str='中文如何？';  
execReg(reg,str);试图用单词字符去匹配中文自然行不通了，返回null。  
  
  
/W表示非单词字符，等效于[^a-zA-Z0-9_]  
  
reg = //W+/;  
str='中文如何？';  
execReg(reg,str);返回完整的字符串，因为，无论是中文和“？”都算作是非单词字符。  
  
  
反向引用  
形式如下：/(子正则表达式)/1/  
  
依旧用例子来说明：  
  
1.  
  
reg = //w/;  
str='blueidea';  
execReg(reg,str);返回b。  
  
2.  
  
reg = /(/w)(/w)/;  
str='blueidea';  
execReg(reg,str);返回bl,b,l  
  
bl是整个正则匹配的内容，b是第一个括号里的子正则表达式匹配的内容，l是第二个括号匹配的内容。  
  
3.  
  
reg = /(/w)/1/;  
str='blueidea';  
execReg(reg,str);则会返回null。这里的“/1”就叫做反向引用，它表示的是第一个括号内的字正则表达式匹配的内容。在上面的例子中，第一个括号里的(/w)匹配了b，因此“/1”就同样表示b了，在余下的字符串里自然找不到b了。  
  
与第二个例子对比就可以发现，“/1”是等同于“第1个括号匹配的内容”，而不是“第一个括号的内容”。  
  
  
reg = /(/w)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);这个正则则会匹配到bb。  
  
  
同样，前面有几个子正则表达式我们就可以使用几个反向引用。例如：  
  
reg = /(/w)(/w)/2/1/;  
str='woow';  
execReg(reg,str);会匹配成功，因为第一个括号匹配到w，第二个括号匹配到o，而/2/1则表示ow，恰好匹配了字符串的最后两个字符。  
  
  
括号（2）  
前面我们曾经讨论过一次括号的问题，见下面这个例子：  
  
reg = /^(b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);这个正则是为了实现只匹配以b或者c开头的字符串，一直匹配到换行字符，但是。上面我们已经看到了，可以使用“/1”来反向引用这个括号里的子正则表达式所匹配的内容。而且exec方法也会将这个字正则表达式的匹配结果保存到返回的结果中。  
  
不记录子正则表达式的匹配结果  
使用形如(?:pattern)的正则就可以避免保存括号内的匹配结果。例如：  
  
reg = /^(?:b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);可以看到返回的结果不再包括那个括号内的字正则表达式多匹配的内容。  
  
同理，反向引用也不好使了：  
  
reg = /^(b|c)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回bb,b。bb是整个正则表达式匹配的内容，而b是第一个子正则表达式匹配的内容。  
  
reg = /^(?:b|c)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回null。由于根本就没有记录括号内匹配的内容，自然没有办法反向引用了。  
  
  
正向预查  
形式：(?=pattern)  
  
所谓正向预查，意思就是：要匹配的字符串，后面必须紧跟着pattern！  
  
我们知道正则表达式/cainiao/会匹配cainiao。同样，也会匹配cainiao9中的cainiao。但是我们可能希望，cainiao只能匹配cainiao8中的菜鸟。这时候就可以像下面这样写：/cainiao(?=8)/，看两个实例：  
  
reg = /cainiao(?=8)/;  
str='cainiao9';  
execReg(reg,str);返回null。  
  
  
reg = /cainiao(?=8)/;  
str='cainiao8';  
execReg(reg,str);匹配cainiao。  
  
需要注意的是，括号里的内容并不参与真正的匹配，只是检查一下后面的字符是否符合要求而已，例如上面的正则，返回的是cainiao，而不是cainiao8。  
  
  
再来看两个例子：  
  
reg = /blue(?=idea)/;  
str='blueidea';  
execReg(reg,str);匹配到blue，而不是blueidea。  
  
  
reg = /blue(?=idea)/;  
str='bluetooth';  
execReg(reg,str);返回null，因为blue后面不是idea。  
  
  
reg = /blue(?=idea)/;  
str='bluetoothidea';  
execReg(reg,str);同样返回null。  
  
  
?!  
形式(?!pattern)和?=恰好相反，要求字符串的后面不能紧跟着某个pattern，还拿上面的例子：  
  
reg = /blue(?!idea)/;  
str='blueidea';  
execReg(reg,str);返回null，因为正则要求，blue的后面不能是idea。  
  
  
reg = /blue(?!idea)/;  
str='bluetooth';  
execReg(reg,str);则成功返回blue。  
  
  
匹配元字符  
首先要搞清楚什么是元字符呢？我们之前用过*,+,?之类的符号，它们在正则表达式中都有一定的特殊含义，类似这些有特殊功能的字符都叫做元字符。例如  
  
reg = /c*/;表示有任意个c，但是如果我们真的想匹配’c*’这个字符串的时候怎么办呢？只要将*转义了就可以了，如下：  
  
reg = /c/*/;  
str='c*';  
execReg(reg,str);返回匹配的字符串：c*。  
  
  
同理，要匹配其他元字符，只要在前面加上一个“/”就可以了。  
  
  
正则表达式的修饰符  
全局匹配，修饰符g  
形式：/pattern/g  
  
例子：reg = /b/g;  
  
后面再说这个g的作用。先看后面的两个修饰符。  
  
不区分大小写，修饰符i  
形式：/pattern/i  
  
例子：  
  
var reg = /b/;  
var str = 'BBS';  
execReg(reg,str);返回null，因为大小写不符合。  
  
  
var reg = /b/i;  
var str = 'BBS';  
execReg(reg,str);匹配到B，这个就是i修饰符的作用了。  
  
行首行尾，修饰符m  
形式：/pattern/m  
  
m修饰符的作用是修改^和$在正则表达式中的作用，让它们分别表示行首和行尾。例如：  
  
var reg = /^b/;  
var str = 'test/nbbs';  
execReg(reg,str);匹配失败，因为字符串的开头没有b字符。但是加上m修饰符之后：  
  
var reg = /^b/m;  
var str = 'test/nbbs';  
execReg(reg,str);匹配到b，因为加了m修饰符之后，^已经表示行首，由于bbs在字符串第二行的行首，所以可以成功地匹配。  
  
exec方法详解  
exec方法的返回值  
exec方法返回的其实并不是匹配结果字符串，而是一个对象，简单地修改一下execReg函数，来做一个实验就可以印证这一点：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(typeof result);  
}  
var reg = /b/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果显示result的类型是object。而且是一个类似数组的对象。使用for in可以知道它的属性: index input 0。其中index是表示匹配在原字符串中的索引；而input则是表示输入的字符串；  
  
至于0则是表示只有一个匹配结果，可以用下标0来引用这个匹配结果，这个数量可能改变。我们可以通过返回值的length属性来得知匹配结果的总数量。  
  
根据以上对返回值的分析，修改execReg函数如下：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
document.write('index:'+result.index+'<br  />'  
+'input:'+result.input+'<br  />'  
);  
for(i=0;i<result.length;i++){  
document.write('result['+i+']:'+result[i]+'<br  />')  
}  
}马上来实验一下：  
  
var reg = //w/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果如下：  
  
index:0   
input:bbs.bblueidea.com   
result[0]:b   
输入字符串为bbs.bblueidea.com；  
  
匹配的b在原字符串的索引是0。  
  
正则的匹配结果为一个，b；  
  
  
var reg =  /(/w)(/w)(.+)/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果为：  
  
index:0  
input:bbs.bblueidea.com  
result[0]:bbs.bblueidea.com  
result[1]:b  
result[2]:b  
result[3]:s.bblueidea.com  
  
  
由上面两个例子可见，返回对象[0]就是整个正则表达式所匹配的内容。后续的元素则是各个子正则表达式的匹配内容。  
  
  
exec方法对正则表达式的更新  
exec方法在返回结果对象的同时，还可能会更新原来的正则表达式，这就要看正则表达式是否设置了g修饰符。先来看两个例子吧：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
execReg(reg,str);  
execReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
index:0  
input:bbs.blueidea.com  
result[0]:b  
  
也就是说，两次匹配的结果完全一样，从索引可以看出来，匹配的都是字符串首的b字符。  
  
下面看看设置了g的正则表达式表现如何：  
  
var reg = /b/g;  
var str =  'bbs.blueidea.com';  
execReg(reg,str);  
execReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
index:1  
input:bbs.blueidea.com  
result[0]:b  
  
可以看得出来，第二次匹配的是字符串的字符串的第二个b。这也就是g修饰符的作用了，下面来看exec是如何区别对待g和非g正则表达式的。  
  
  
如果正则表达式没有设置g，那么exec方法不会对正则表达式有任何的影响，如果设置了g，那么exec执行之后会更新正则表达式的lastIndex属性，表示本次匹配后，所匹配字符串的下一个字符的索引，下一次再用这个正则表达式匹配字符串的时候就会从上次的lastIndex属性开始匹配，也就是上面两个例子结果不同的原因了。  
  
  
test方法  
test方法仅仅检查是否能够匹配str，并且返回布尔值以表示是否成功。同样建立一个简单的测试函数：  
  
function  testReg(reg,str){  
alert(reg.test(str));  
}实例1  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
testReg(reg,str);成功，输出true。  
  
实例2  
  
var reg = /9/;  
var str =  'bbs.blueidea.com';  
testReg(reg,str);失败，返回false。  
  
使用字符串的方法执行正则表达式  
match方法  
形式：str.match(reg);  
  
与正则表达式的exec方法类似，该方法同样返回一个类似数组的对象，也有input和index属性。我们定义如下一个函数用来测试：  
  
function  matchReg(reg,str){  
var result =  str.match(reg);  
if(result ){  
document.write('index:'+result.index+'<br  />'  
+'input:'+result.input+'<br  />'  
);  
for(i=0;i<result.length;i++){  
document.write('result['+i+']:'+result[i]+'<br  />')  
}  
}else{  
alert('null：匹配失败！')  
}  
}例如：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
matchReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
  
可见，和exec的结果一样。  
  
但是如果正则表达式设置了g修饰符，exec和match的行为可就不一样了，见下例：  
  
index:undefined  
input:undefined  
result[0]:b  
result[1]:b  
result[2]:b  
  
设置了g修饰符的正则表达式在完成一次成功匹配后不会停止，而是继续找到所有可以匹配到的字符。返回的结果包括了三个b。不过没有提供input和index这些信息。  
  
  
replace方法  
形式：str. replace (reg,’new str’);  
  
它的作用是将str字符串中匹配reg的部分用’’new str”部分代码，值得注意的是原字符串并不会被修改，而是作为返回值被返回。例子：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'c');  
document.write(newStr);结果为cbs.blueidea.com，只有第一个b被替换为c。  
  
  
var reg = /b/g;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'c');  
document.write(newStr);输出ccs.clueidea.com  
  
由于，设置了g修饰符，所以会替换掉所有的b。  
  
  
var reg = //w+/g;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'word');  
document.write(newStr);输出：  
  
word.word.word。  
  
在replace函数中使用$引用子正则表达式匹配内容  
就像在正则里我们可以使用/1来引用第一个子正则表达式所匹配的内容一样，我们在replace函数的替换字符里也可以使用$1来引用相同的内容。  
  
还是来看一个例子吧：  
  
var reg =  /(/w+).(/w+).(/w+)/;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'$1.$1.$1');  
document.write(newStr);输出的结果为：  
  
bbs.bbs.bbs  
  
首先，我们知道第一个子正则表达式匹配到了bbs，那么$1也就代表bbs了。其后我们把替换字符串设置为'$1.$1.$1',其实也就是“bbs.bbs.bbs”。同理，$2就是blueidea，$3就是com。  
  
  
在来看一个例子，颠倒空格前后两个单词的顺序。  
  
var reg =  /(/w+)/s(/w+)/;  
var str = 'cainiao  gaoshou';  
var newStr =  str.replace(reg,'$2 $1');  
document.write(newStr);结果为：gaoshou cainiao，也就是空格前后的单词被调换顺序了。  
  
  
由于在替换文本里$有了特殊的含义，所以我们如果想要是用$这个字符的话，需要写成$$，例如：  
  
var reg =  /(/w+)/s(/w+)/;  
var str = 'cainiao  gaoshou';  
var newStr =  str.replace(reg,'
 
');  
document.write(newStr);结果为：$ $。  
  
  
search方法和split方法  
同样，字符串的search方法和split方法中也可以使用正则表达式，形式如下：  
  
str.search(reg);  
  
search返回正则表达式第一次匹配的位置。例子：  
  
var reg = /idea/;  
var str = 'blueidea';  
var pos =  str.search(reg);  
document.write(pos);结果为4。  
  
下面的例子找出第一个非单词字符：  
  
var reg = //W/;  
var str =  'bbs.blueidea.com';  
var pos =  str.search(reg);  
document.write(pos);结果为3，也就是那个点“.”的位置。  
  
  
str.split(reg,’seprator’);  
split返回分割后的数组，例如：  
var reg = //W/;  
var str =  'bbs.blueidea.com';  
var arr =  str.split(reg);  
document.write(arr);结果为：bbs,blueidea,com，可见数组被非单词字符分为了有三个元素的数组。  
  
  
var  reg = //W/;  
var  str = 'http://www.baidu.com/';  
var  arr = str.split(reg);  
document.write(arr.length+'<br  />');  
document.write(arr);结果为：  
  
7  
http,,,www,baidu,com,  
  
可见字符串被分为了有7个元素的数组，其中包括了三个为空字符串的元素。  
  
JavaScript正则表达式  
JavaScript正则表达式   
 

今天突然遇到了这个功能，百度一下找到了很多，不外乎两种方式：正则表达式和逐个字符判断，都挺麻烦。正则表达式试了半天都没成功。自己琢磨了一个比较简单的方法：取整后判断是否和原值相等!  
  
javascript的取整函数是：parseInt  
  
if(parseInt(value)==value)  
{  
  
//整数！  
}  
  
  
正则方式  
  
1） "^//d+$"　　//非负整数（正整数 + 0）   
"^[0-9]*[1-9][0-9]*$"　　//正整数   
"^((-//d+)|(0+))$"　　//非正整数（负整数 + 0）   
"^-[0-9]*[1-9][0-9]*$"　　//负整数   
"^-?//d+$"　　　　//整数   
"^//d+(//.//d+)?$"　　//非负浮点数（正浮点数 + 0）   
"^(([0-9]+//.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*//.[0-9]+)|([0-9]*[1-9][0-9]*))$"　　//正浮点数   
"^((-//d+(//.//d+)?)|(0+(//.0+)?))$"　　//非正浮点数（负浮点数 + 0）   
"^(-(([0-9]+//.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*//.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　　//负浮点数   
"^(-?//d+)(//.//d+)?$"　　//浮点数  
2） var r = /^/+?[1-9][0-9]*$/;　　//正整数   
      r.test(str);  
 

 

/校验用户名：只能输入1-30个字母  
function isTrueName(s)    
{    
var patrn=/^[a-zA-Z]{1,30}$/;    
if (!patrn.exec(s)) return false    
return true    
}   
//校验密码：只能输入6-20个字母、数字、下划线    
function isPasswd(s)    
{    
var patrn=/^(/w){6,20}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”    
function isTel(s)    
{    
//var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?(/d){1,12})+$/;    
var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?((/d)|[ ]){1,12})+$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验手机号码：必须以数字开头，除数字外，可含有“-”    
function isMobil(s)    
{    
var patrn=/^[+]{0,1}(/d){1,3}[ ]?([-]?((/d)|[ ]){1,12})+$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验邮政编码    
function isPostalCode(s)    
{    
//var patrn=/^[a-zA-Z0-9]{3,12}$/;    
var patrn=/^[a-zA-Z0-9 ]{3,12}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
//校验搜索关键字    
function isSearch(s)    
{    
var patrn=/^[^`~!@#$%^&*()+=|///][/]/{/}:;'/,.<>/?]{1}[^`~!@$%^&()+=|///]    
        [/]/{/}:;'/,.<>?]{0,19}$/;    
if (!patrn.exec(s)) return false    
return true    
}    
    
function isIP(s) //by zergling    
{    
var patrn=/^[0-9.]{1,20}$/;    
if (!patrn.exec(s)) return false    
return true    
}     
    
其他正则表达式：    
"^//d+$"　　//非负整数（正整数 + 0）    
"^[0-9]*[1-9][0-9]*$"　　//正整数     
"^((-//d+)|(0+))$"　　//非正整数（负整数 + 0）     
"^-[0-9]*[1-9][0-9]*$"　　//负整数     
"^-?//d+$"　　　　// 整数     
"^(-?//d+)(//.//d+)?$"　　//浮点数     
"^[A-Za-z]+$"　　// 由26个英文字母组成的字符串     
"^[A-Z]+$"　　//由 26个英文字母的大写组成的字符串     
"^[a-z]+$"　　//由 26个英文字母的小写组成的字符串     
"^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串     
"^//w+$"　　//由数字、26个英文字母或者下划线组成的字符串  
"/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(/.[a-zA-Z0-9_-])+/"   //email地址  
"^[//w-]+(//.[//w-]+)*@[//w-]+(//.[//w-]+)+$"　　　　//email地址     
"^[a-zA-z]+://(//w+(-//w+)*)(//.(//w+(-//w+)*))*(//?//S*)?$"　　//url  
"/^/[ /t]*$/"; 匹配1个空白行。     
"//d{2}-/d{5}/"; 验证1个ID号码是否由1个2位数字，1个连字符以及1个5位数字组成。     
"/<(.*)>.*<///1>/" 匹配1个HTML 标记  
 var dd=s.replace(/<\/?.+?>/g,""); 
  var dds=dd.replace(/&nbsp;/g,"");//dds为得到后的内容 
  alert(dds); 
protected string str = "<table><tr><td>sdasasdsdd</td></tr></table><br><p>sds</p><img id='img1' src='http://www.baidu.com/img/baidu_logo.gif' width='100' height='50' alt=''>aaassss<br><img src='http://www.baidu.com/img/baidu_logo.gif' width='100' height='50' alt=''> 说是道 ";

    protected void Page_Load(object sender, EventArgs e)

    {

        //string regexstr = @"<[^>]*>";    //去除所有的标签

        //@"<script[^>]*?>.*?</script >" //去除所有脚本，中间部分也删除

         

        // string regexstr = @"<img[^>]*>";   //去除图片的正则

       // string regexstr = @"<(?!br).*?>";   //去除所有标签，只剩br

        // string regexstr = @"<table[^>]*?>.*?</table>";   //去除table里面的所有内容

        string regexstr = @"<(?!img|br|p|/p).*?>";   //去除所有标签，只剩img,br,p

   

        str = Regex.Replace(str, regexstr, string.Empty, RegexOptions.IgnoreCase);

    }
 

 var str = "1a1b1c";
var reg = new RegExp("1(.)", "g");
alert(reg.test(str)); // true
alert(reg.test(str)); // true
/*alert(reg.test(str)); // trued
alert(reg.test(str)); // trued */
alert(RegExp.$1);

/* 
var reg = new RegExp("1.", "g");
alert(reg.exec(str)[0]);
alert(reg.exec(str)[0]); */

 

格式: http://www.cnblogs.com/shi0090/p/5971554.html
var expression=/at/gi;
expression = new RegExp(pattern, flags); \\[ 脱离转义符
正则转义符：( [ { \ ^ $ | ) ? * + . ] } 加入 \[ 脱离转义符

.可变身 
[ab]只能变成a,b

转义作用()
var text = "mom and dad and baby";
var pattern = /mom( and dad( and baby)?)?/gi;

var matches = pattern.exec(text);
console.log(matches.index); // 0
console.log(matches.input); // "mom and dad and baby"
console.log(matches[0]); // "mom and dad and baby"
console.log(matches[1]); // " and dad and baby"
console.log(matches[2]); // " and baby"

var text = "000-00-0000";
var pattern = /\d{3}-\d{2}-\d{4}/;

if (pattern.test(text)){
console.log("The pattern was matched.");
}

var text = "this has been a xhort summer";
var pattern = /(.)hort/g;


if (pattern.test(text)){

console.log(RegExp.leftContext); // this has been a
console.log(RegExp.rightContext); // summer
console.log(RegExp.lastMatch); // short
console.log(RegExp.lastParen); // s
console.log(RegExp.$1); 
console.log(RegExp.multiline); // false
}

 

var a = 'aaaa'.match(/\w/g);
console.log(a); // ["a", "a", "a", "a"]

var a = 'aaaa'.match(/\w/);
console.log(a); // ["a", index: 0, input: "aaaa"]

'aaaa'.replace('a', 'b') //"baaa"

第一种方法：  
  
var reg = /pattern/;第二种方法：  
  
var reg = new  RegExp('pattern');正则表达式的exec方法简介  
语法：  
  
reg.exec(str);其中str为要执行正则表达式的目标字符串。  
  
例如：  
  
<mce:script  type="text/javascript"><!--  
var reg = /test/;  
var str = 'testString';  
var result =  reg.exec(str);  
alert(result);  
// --></mce:script>将会输出test，因为正则表达式reg会匹配str(‘testString’)中的’test’子字符串，并且将其返回。  
  
  
我们使用下面的函数来做匹配正则的练习：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(result);  
}函数接受一个正则表达式参数reg和一个目标字符串参数str，执行之后会alert出正则表达式与字符串的匹配结果。  
  
用这个函数测试上面的例子就是：  
  
<mce:script  type="text/javascript"><!--  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(result);  
}  
var reg = /test/;  
var str = 'testString';  
execReg(reg,str);  
// --></mce:script>上面的例子用正则里的test去匹配字符串里的test，实在是很无聊，同样的任务用indexOf方法就可以完成了。用正则，自然是要完成更强大的功能：  
  
一片两片三四片，落尽正则全不见  
上面的小标题翻译成正则就是{1},{2},{3,4},{1,}。  
  
c{n}  
{1}表示一个的意思。  
  
/c{1}/只能匹配一个c。  
  
/c{2}/则会匹配两个连续的c。  
  
以此类推,  
  
/c{n}/则会匹配n个连续的c。  
  
看下面的例子：  
  
reg = /c{1}/;  
str='cainiao';  
execReg(reg,str);返回结果c  
  
  
reg = /c{2}/;  
str='cainiao';  
execReg(reg,str);返回结果null，表示没有匹配成功。  
  
  
reg = /c{2}/;  
str='ccVC果冻爽';  
execReg(reg,str);返回结果cc。  
  
c{m,n}  
c{3,4}的意思是，连续的3个c或者4个c。  
  
例如  
  
reg = /c{3,4}/;  
str='ccVC果冻爽';  
execReg(reg,str);返回结果null，表示没有匹配成功。  
  
  
reg = /c{3,4}/;  
str='cccTest';  
execReg(reg,str);结果返回ccc。  
  
  
reg = /c{3,4}/;  
str='ccccTest';  
execReg(reg,str);结果返回cccc，这表明正则会尽量多品牌，可3可4的时候它会选择多匹配一个。  
  
  
reg = /c{3,4}/;  
str='cccccTest';  
execReg(reg,str);仍然只匹配4个c。  
  
  
由以上例子可以推断出，c{m,n}表示m个到n个c，且m小于等于n。  
  
c{n,}  
c{1,}表示1个以上的c。例如：  
  
  
reg = /c{1,}/;  
str='cainiao';  
execReg(reg,str);结果返回c。  
  
  
reg = /c{1,}/;  
str='cccccTest';  
execReg(reg,str);返回ccccc，再次说明了正则表达式会尽量多地匹配。  
  
  
reg = /c{2,}/;  
str='cainiao';  
execReg(reg,str);结果返回null，c{2,}表示2个以上的c，而cainiao中只有1个c。  
  
  
由以上例子可知，c{n,}表示最少n个c，最多则不限个数。  
  
  
*,+,?  
*表示0次或者多次，等同于{0,}，即  
  
c* 和 c{0,} 是一个意思。  
  
  
+表示一次或者多次，等同于{1,}，即  
  
c+ 和 c{1,} 是一个意思。  
  
  
最后，?表示0次或者1次，等同于{0,1}，即  
  
c? 和 c{0,1} 是一个意思。  
  
  
贪心与非贪心  
人都是贪婪的，正则也是如此。我们在例子reg = /c{3,4}/;str='ccccTest';的例子中已经看到了，能匹配四个的时候，正则绝对不会去匹配三个。上面所介绍的所有的正则都是这样，只要在合法的情况下，它们会尽量多去匹配字符，这就叫做贪心模式。  
  
如果我们希望正则尽量少地匹配字符，那么就可以在表示数字的符号后面加上一个?。组成如下的形式：  
  
{n,}?, *?, +?, ??, {m,n}?  
  
同样来看一个例子：  
  
reg = /c{1,}?/;  
str='ccccc';  
execReg(reg,str);返回的结果只有1个c，尽管有5个c可以匹配，但是由于正则表达式是非贪心模式，所以只会匹配一个。  
  
/^开头,结尾$/  
^表示只匹配字符串的开头。看下面的例子：  
  
  
reg = /^c/;  
str='维生素c';  
execReg(reg,str);结果为null，因为字符串‘维生素c’的开头并不是c，所以匹配失败。  
  
  
reg = /^c/;  
str='cainiao';  
execReg(reg,str);这次则返回c，匹配成功，因为cainiao恰恰是以c开头的。  
  
  
与^相反，$则只匹配字符串结尾的字符，同样，看例子：  
  
  
reg = /c$/;  
str='cainiao';  
execReg(reg,str);返回null，表示正则表达式没能在字符串的结尾找到c这个字符。  
  
  
reg = /c$/;  
str='维生素c';  
execReg(reg,str);这次返回的结果是c，表明匹配成功。  
  
  
点’.’  
‘.’会匹配字符串中除了换行符/n之外的所有字符，例如  
  
reg = /./;  
str='cainiao';  
execReg(reg,str);结果显示，正则匹配到了字符c。  
  
  
reg = /./;  
str='blueidea';  
execReg(reg,str);这次是b。  
  
  
reg = /.+/;  
str='blueidea――经典论坛  好_。';  
execReg(reg,str);结果是“blueidea――经典论坛 好_。“也就是说所有的字符都被匹配掉了，包括一个空格，一个下滑线，和一个破折号。  
  
  
reg = /.+/;  
reg = /.+/;  
str='bbs.blueidea.com';  
execReg(reg,str);同样，直接返回整个字符串――bbs.blueidea.com，可见”.”也匹配”.”本身。  
  
  
reg = /^./;  
str='/ncainiao';  
execReg(reg,str);结果是null，终于失败了，正则要求字符串的第一个字符不是换行，但是恰恰字符是以/n开始的。  
  
  
二选一，正则表达式中的或，“|“  
b|c表示，匹配b或者c。  
  
例如：  
  
reg = /b|c/;  
str='blueidea';  
execReg(reg,str);结果是b。  
  
  
reg = /b|c/;  
str='cainiao';  
execReg(reg,str);结果是c。  
  
  
reg = /^b|c.+/;  
str='cainiao';  
execReg(reg,str);匹配掉整个cainiao。  
  
  
reg = /^b|c.+/;  
str='bbs.blueidea.com';  
execReg(reg,str);结果只有一个b，而不是整个字符串。因为上面正则表达式的意思是，匹配开头的b或者是c.+。  
  
括号  
reg = /^(b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);这次的结果是整个串bbs.blueidea.com，机上上面的括号这后，这个正则的意思是，如果字符串的开头是b或者c，那么匹配开头的b或者c以及其后的所有的非换行字符。  
  
如果你也实验了的话，会发现返回的结果后面多出来一个“,b“，这是()内的b|c所匹配的内容。我们在正则表达式内括号里写的内容会被认为是子正则表达式，所匹配的结果也会被记录下来供后面使用。我们暂且不去理会这个特性。  
  
  
字符集合[abc]  
[abc]表示a或者b或者c中的任意一个字符。例如：  
  
reg = /^[abc]/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回结果是b。  
  
  
reg = /^[abc]/;  
str='test';  
execReg(reg,str);这次的结果就是null了。  
  
  
我们在字字符集合中使用如下的表示方式:[a-z],[A-Z],[0-9]，分别表示小写字母，大写字母，数字。例如：  
  
  
reg =  /^[a-zA-Z][a-zA-Z0-9_]+/;  
str='test';  
execReg(reg,str);结果是整个test，正则的意思是开头必须是英文字母，后面可以是英文字母或者数字以及下划线。  
  
  
反字符集合[^abc]  
^在正则表达式开始部分的时候表示开头的意思，例如/^c/表示开头是c；但是在字符集和中，它表示的是类似“非“的意思，例如[^abc]就表示不能是a，b或者c中的任何一个。例如：  
  
reg = /[^abc]/;  
str='blueidea';  
execReg(reg,str);返回的结果是l，因为它是第一个非abc的字符（即第一个b没有匹配）。同样：  
  
reg = /[^abc]/;  
str='cainiao';  
execReg(reg,str);则返回i，前两个字符都是[abc]集合中的。  
  
由此我们可知：[^0-9]表示非数字，[^a-z]表示非小写字母，一次类推。  
  
  
边界与非边界  
/b表示的边界的意思，也就是说，只有字符串的开头和结尾才算数。例如//bc/就表示字符串开始的c或者是结尾的c。看下面的例子：  
  
  
reg = //bc/;  
str='cainiao';  
execReg(reg,str);返回结果c。匹配到了左边界的c字符。  
  
  
reg = //bc/;  
str='维生素c';  
execReg(reg,str);仍然返回c，不过这次返回的是右侧边界的c。  
  
  
reg = //bc/;  
str='bcb';  
execReg(reg,str);这次匹配失败，因为bcb字符串中的c被夹在中间，既不在左边界也不再右边界。  
  
  
与/b对应/B表示非边界。例如：  
  
  
reg = //Bc/;  
str='bcb';  
execReg(reg,str);这次会成功地匹配到bcb中的c，。然而  
  
  
reg = //Bc/;  
str='cainiao';  
execReg(reg,str);则会返回null。因为/B告诉正则，只匹配非边界的c。  
  
  
数字与非数字  
/d表示数字的意思，相反，/D表示非数字。例如：  
  
reg = //d/;  
str='cainiao8';  
execReg(reg,str);返回的匹配结果为8，因为它是第一个数字字符。  
  
  
reg = //D/;  
str='cainiao8';  
execReg(reg,str);返回c，第一个非数字字符。  
  
  
空白  
/f匹配换页符，/n匹配换行符，/r匹配回车，/t匹配制表符，/v匹配垂直制表符。  
  
/s匹配单个空格，等同于[/f/n/r/t/v]。例如：  
  
  
reg = //s.+/;  
str='This is a test  String.';  
execReg(reg,str);返回“is a test String.”，正则的意思是匹配第一个空格以及其后的所有非换行字符。  
  
  
同样，/S表示非空格字符。  
  
reg = //S+/;  
str='This is a test  String.';  
execReg(reg,str);匹配结果为This，当遇到第一个空格之后，正则就停止匹配了。  
  
  
单词字符  
/w表示单词字符，等同于字符集合[a-zA-Z0-9_]。例如：  
  
reg = //w+/;  
str='blueidea';  
execReg(reg,str);返回完整的blueidea字符串，因为所有字符都是单词字符。  
  
  
reg = //w+/;  
str='.className';  
execReg(reg,str);结果显示匹配了字符串中的className，只有第一个“.”――唯一的非单词字符没有匹配。  
  
  
reg = //w+/;  
str='中文如何？';  
execReg(reg,str);试图用单词字符去匹配中文自然行不通了，返回null。  
  
  
/W表示非单词字符，等效于[^a-zA-Z0-9_]  
  
reg = //W+/;  
str='中文如何？';  
execReg(reg,str);返回完整的字符串，因为，无论是中文和“？”都算作是非单词字符。  
  
  
反向引用  
形式如下：/(子正则表达式)/1/  
  
依旧用例子来说明：  
  
1.  
  
reg = //w/;  
str='blueidea';  
execReg(reg,str);返回b。  
  
2.  
  
reg = /(/w)(/w)/;  
str='blueidea';  
execReg(reg,str);返回bl,b,l  
  
bl是整个正则匹配的内容，b是第一个括号里的子正则表达式匹配的内容，l是第二个括号匹配的内容。  
  
3.  
  
reg = /(/w)/1/;  
str='blueidea';  
execReg(reg,str);则会返回null。这里的“/1”就叫做反向引用，它表示的是第一个括号内的字正则表达式匹配的内容。在上面的例子中，第一个括号里的(/w)匹配了b，因此“/1”就同样表示b了，在余下的字符串里自然找不到b了。  
  
与第二个例子对比就可以发现，“/1”是等同于“第1个括号匹配的内容”，而不是“第一个括号的内容”。  
  
  
reg = /(/w)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);这个正则则会匹配到bb。  
  
  
同样，前面有几个子正则表达式我们就可以使用几个反向引用。例如：  
  
reg = /(/w)(/w)/2/1/;  
str='woow';  
execReg(reg,str);会匹配成功，因为第一个括号匹配到w，第二个括号匹配到o，而/2/1则表示ow，恰好匹配了字符串的最后两个字符。  
  
  
括号（2）  
前面我们曾经讨论过一次括号的问题，见下面这个例子：  
  
reg = /^(b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);这个正则是为了实现只匹配以b或者c开头的字符串，一直匹配到换行字符，但是。上面我们已经看到了，可以使用“/1”来反向引用这个括号里的子正则表达式所匹配的内容。而且exec方法也会将这个字正则表达式的匹配结果保存到返回的结果中。  
  
不记录子正则表达式的匹配结果  
使用形如(?:pattern)的正则就可以避免保存括号内的匹配结果。例如：  
  
reg = /^(?:b|c).+/;  
str='bbs.blueidea.com';  
execReg(reg,str);可以看到返回的结果不再包括那个括号内的字正则表达式多匹配的内容。  
  
同理，反向引用也不好使了：  
  
reg = /^(b|c)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回bb,b。bb是整个正则表达式匹配的内容，而b是第一个子正则表达式匹配的内容。  
  
reg = /^(?:b|c)/1/;  
str='bbs.blueidea.com';  
execReg(reg,str);返回null。由于根本就没有记录括号内匹配的内容，自然没有办法反向引用了。  
  
  
正向预查  
形式：(?=pattern)  
  
所谓正向预查，意思就是：要匹配的字符串，后面必须紧跟着pattern！  
  
我们知道正则表达式/cainiao/会匹配cainiao。同样，也会匹配cainiao9中的cainiao。但是我们可能希望，cainiao只能匹配cainiao8中的菜鸟。这时候就可以像下面这样写：/cainiao(?=8)/，看两个实例：  
  
reg = /cainiao(?=8)/;  
str='cainiao9';  
execReg(reg,str);返回null。  
  
  
reg = /cainiao(?=8)/;  
str='cainiao8';  
execReg(reg,str);匹配cainiao。  
  
需要注意的是，括号里的内容并不参与真正的匹配，只是检查一下后面的字符是否符合要求而已，例如上面的正则，返回的是cainiao，而不是cainiao8。  
  
  
再来看两个例子：  
  
reg = /blue(?=idea)/;  
str='blueidea';  
execReg(reg,str);匹配到blue，而不是blueidea。  
  
  
reg = /blue(?=idea)/;  
str='bluetooth';  
execReg(reg,str);返回null，因为blue后面不是idea。  
  
  
reg = /blue(?=idea)/;  
str='bluetoothidea';  
execReg(reg,str);同样返回null。  
  
  
?!  
形式(?!pattern)和?=恰好相反，要求字符串的后面不能紧跟着某个pattern，还拿上面的例子：  
  
reg = /blue(?!idea)/;  
str='blueidea';  
execReg(reg,str);返回null，因为正则要求，blue的后面不能是idea。  
  
  
reg = /blue(?!idea)/;  
str='bluetooth';  
execReg(reg,str);则成功返回blue。  
  
  
匹配元字符  
首先要搞清楚什么是元字符呢？我们之前用过*,+,?之类的符号，它们在正则表达式中都有一定的特殊含义，类似这些有特殊功能的字符都叫做元字符。例如  
  
reg = /c*/;表示有任意个c，但是如果我们真的想匹配’c*’这个字符串的时候怎么办呢？只要将*转义了就可以了，如下：  
  
reg = /c/*/;  
str='c*';  
execReg(reg,str);返回匹配的字符串：c*。  
  
  
同理，要匹配其他元字符，只要在前面加上一个“/”就可以了。  
  
  
正则表达式的修饰符  
全局匹配，修饰符g  
形式：/pattern/g  
  
例子：reg = /b/g;  
  
后面再说这个g的作用。先看后面的两个修饰符。  
  
不区分大小写，修饰符i  
形式：/pattern/i  
  
例子：  
  
var reg = /b/;  
var str = 'BBS';  
execReg(reg,str);返回null，因为大小写不符合。  
  
  
var reg = /b/i;  
var str = 'BBS';  
execReg(reg,str);匹配到B，这个就是i修饰符的作用了。  
  
行首行尾，修饰符m  
形式：/pattern/m  
  
m修饰符的作用是修改^和$在正则表达式中的作用，让它们分别表示行首和行尾。例如：  
  
var reg = /^b/;  
var str = 'test/nbbs';  
execReg(reg,str);匹配失败，因为字符串的开头没有b字符。但是加上m修饰符之后：  
  
var reg = /^b/m;  
var str = 'test/nbbs';  
execReg(reg,str);匹配到b，因为加了m修饰符之后，^已经表示行首，由于bbs在字符串第二行的行首，所以可以成功地匹配。  
  
exec方法详解  
exec方法的返回值  
exec方法返回的其实并不是匹配结果字符串，而是一个对象，简单地修改一下execReg函数，来做一个实验就可以印证这一点：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
alert(typeof result);  
}  
var reg = /b/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果显示result的类型是object。而且是一个类似数组的对象。使用for in可以知道它的属性: index input 0。其中index是表示匹配在原字符串中的索引；而input则是表示输入的字符串；  
  
至于0则是表示只有一个匹配结果，可以用下标0来引用这个匹配结果，这个数量可能改变。我们可以通过返回值的length属性来得知匹配结果的总数量。  
  
根据以上对返回值的分析，修改execReg函数如下：  
  
function  execReg(reg,str){  
var result =  reg.exec(str);  
document.write('index:'+result.index+'<br  />'  
+'input:'+result.input+'<br  />'  
);  
for(i=0;i<result.length;i++){  
document.write('result['+i+']:'+result[i]+'<br  />')  
}  
}马上来实验一下：  
  
var reg = //w/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果如下：  
  
index:0   
input:bbs.bblueidea.com   
result[0]:b   
输入字符串为bbs.bblueidea.com；  
  
匹配的b在原字符串的索引是0。  
  
正则的匹配结果为一个，b；  
  
  
var reg =  /(/w)(/w)(.+)/;  
var  str='bbs.bblueidea.com';  
execReg(reg,str);结果为：  
  
index:0  
input:bbs.bblueidea.com  
result[0]:bbs.bblueidea.com  
result[1]:b  
result[2]:b  
result[3]:s.bblueidea.com  
  
  
由上面两个例子可见，返回对象[0]就是整个正则表达式所匹配的内容。后续的元素则是各个子正则表达式的匹配内容。  
  
  
exec方法对正则表达式的更新  
exec方法在返回结果对象的同时，还可能会更新原来的正则表达式，这就要看正则表达式是否设置了g修饰符。先来看两个例子吧：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
execReg(reg,str);  
execReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
index:0  
input:bbs.blueidea.com  
result[0]:b  
  
也就是说，两次匹配的结果完全一样，从索引可以看出来，匹配的都是字符串首的b字符。  
  
下面看看设置了g的正则表达式表现如何：  
  
var reg = /b/g;  
var str =  'bbs.blueidea.com';  
execReg(reg,str);  
execReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
index:1  
input:bbs.blueidea.com  
result[0]:b  
  
可以看得出来，第二次匹配的是字符串的字符串的第二个b。这也就是g修饰符的作用了，下面来看exec是如何区别对待g和非g正则表达式的。  
  
  
如果正则表达式没有设置g，那么exec方法不会对正则表达式有任何的影响，如果设置了g，那么exec执行之后会更新正则表达式的lastIndex属性，表示本次匹配后，所匹配字符串的下一个字符的索引，下一次再用这个正则表达式匹配字符串的时候就会从上次的lastIndex属性开始匹配，也就是上面两个例子结果不同的原因了。  
  
  
test方法  
test方法仅仅检查是否能够匹配str，并且返回布尔值以表示是否成功。同样建立一个简单的测试函数：  
  
function  testReg(reg,str){  
alert(reg.test(str));  
}实例1  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
testReg(reg,str);成功，输出true。  
  
实例2  
  
var reg = /9/;  
var str =  'bbs.blueidea.com';  
testReg(reg,str);失败，返回false。  
  
使用字符串的方法执行正则表达式  
match方法  
形式：str.match(reg);  
  
与正则表达式的exec方法类似，该方法同样返回一个类似数组的对象，也有input和index属性。我们定义如下一个函数用来测试：  
  
function  matchReg(reg,str){  
var result =  str.match(reg);  
if(result ){  
document.write('index:'+result.index+'<br  />'  
+'input:'+result.input+'<br  />'  
);  
for(i=0;i<result.length;i++){  
document.write('result['+i+']:'+result[i]+'<br  />')  
}  
}else{  
alert('null：匹配失败！')  
}  
}例如：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
matchReg(reg,str);结果如下：  
  
index:0  
input:bbs.blueidea.com  
result[0]:b  
  
可见，和exec的结果一样。  
  
但是如果正则表达式设置了g修饰符，exec和match的行为可就不一样了，见下例：  
  
index:undefined  
input:undefined  
result[0]:b  
result[1]:b  
result[2]:b  
  
设置了g修饰符的正则表达式在完成一次成功匹配后不会停止，而是继续找到所有可以匹配到的字符。返回的结果包括了三个b。不过没有提供input和index这些信息。  
  
  
replace方法  
形式：str. replace (reg,’new str’);  
  
它的作用是将str字符串中匹配reg的部分用’’new str”部分代码，值得注意的是原字符串并不会被修改，而是作为返回值被返回。例子：  
  
var reg = /b/;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'c');  
document.write(newStr);结果为cbs.blueidea.com，只有第一个b被替换为c。  
  
  
var reg = /b/g;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'c');  
document.write(newStr);输出ccs.clueidea.com  
  
由于，设置了g修饰符，所以会替换掉所有的b。  
  
  
var reg = //w+/g;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'word');  
document.write(newStr);输出：  
  
word.word.word。  
  
在replace函数中使用$引用子正则表达式匹配内容  
就像在正则里我们可以使用/1来引用第一个子正则表达式所匹配的内容一样，我们在replace函数的替换字符里也可以使用$1来引用相同的内容。  
  
还是来看一个例子吧：  
  
var reg =  /(/w+).(/w+).(/w+)/;  
var str =  'bbs.blueidea.com';  
var newStr =  str.replace(reg,'$1.$1.$1');  
document.write(newStr);输出的结果为：  
  
bbs.bbs.bbs  
  
首先，我们知道第一个子正则表达式匹配到了bbs，那么$1也就代表bbs了。其后我们把替换字符串设置为'$1.$1.$1',其实也就是“bbs.bbs.bbs”。同理，$2就是blueidea，$3就是com。  
  
  
在来看一个例子，颠倒空格前后两个单词的顺序。  
  
var reg =  /(/w+)/s(/w+)/;  
var str = 'cainiao  gaoshou';  
var newStr =  str.replace(reg,'$2 $1');  
document.write(newStr);结果为：gaoshou cainiao，也就是空格前后的单词被调换顺序了。  
  
  
由于在替换文本里$有了特殊的含义，所以我们如果想要是用$这个字符的话，需要写成$$，例如：  
  
var reg =  /(/w+)/s(/w+)/;  
var str = 'cainiao  gaoshou';  
var newStr =  str.replace(reg,'
 
');  
document.write(newStr);结果为：$ $。  
  
  
search方法和split方法  
同样，字符串的search方法和split方法中也可以使用正则表达式，形式如下：  
  
str.search(reg);  
  
search返回正则表达式第一次匹配的位置。例子：  
  
var reg = /idea/;  
var str = 'blueidea';  
var pos =  str.search(reg);  
document.write(pos);结果为4。  
  
下面的例子找出第一个非单词字符：  
  
var reg = //W/;  
var str =  'bbs.blueidea.com';  
var pos =  str.search(reg);  
document.write(pos);结果为3，也就是那个点“.”的位置。  
  
  
str.split(reg,’seprator’);  
split返回分割后的数组，例如：  
var reg = //W/;  
var str =  'bbs.blueidea.com';  
var arr =  str.split(reg);  
document.write(arr);结果为：bbs,blueidea,com，可见数组被非单词字符分为了有三个元素的数组。  
  
  
var  reg = //W/;  
var  str = 'http://www.baidu.com/';  
var  arr = str.split(reg);  
document.write(arr.length+'<br  />');  
document.write(arr);结果为：  
  
7  
http,,,www,baidu,com,  
  
可见字符串被分为了有7个元素的数组，其中包括了三个为空字符串的元素。  
  
JavaScript正则表达式  
JavaScript正则表达式   
 

今天突然遇到了这个功能，百度一下找到了很多，不外乎两种方式：正则表达式和逐个字符判断，都挺麻烦。正则表达式试了半天都没成功。自己琢磨了一个比较简单的方法：取整后判断是否和原值相等!  
  
javascript的取整函数是：parseInt  
  
if(parseInt(value)==value)  
{  
  
//整数！  
}  
  
  
正则方式  
  
1） "^//d+$"　　//非负整数（正整数 + 0）   
"^[0-9]*[1-9][0-9]*$"　　//正整数   
"^((-//d+)|(0+))$"　　//非正整数（负整数 + 0）   
"^-[0-9]*[1-9][0-9]*$"　　//负整数   
"^-?//d+$"　　　　//整数   
"^//d+(//.//d+)?$"　　//非负浮点数（正浮点数 + 0）   
"^(([0-9]+//.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*//.[0-9]+)|([0-9]*[1-9][0-9]*))$"　　//正浮点数   
"^((-//d+(//.//d+)?)|(0+(//.0+)?))$"　　//非正浮点数（负浮点数 + 0）   
"^(-(([0-9]+//.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*//.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　　//负浮点数   
"^(-?//d+)(//.//d+)?$"　　//浮点数  
2） var r = /^/+?[1-9][0-9]*$/;　　//正整数   
      r.test(str);  